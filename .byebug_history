c
f.series(moves_client.exercise_month_data)
moves_client.exercise_month_data
emoves_client.exercise_month_dat
c
sums[EXERCISE_DATA_MAP.fetch(activity_name)].fetch(:y)c
sums[EXERCISE_DATA_MAP.fetch(activity_name)].fetch(:y)
sums[EXERCISE_DATA_MAP.fetch(activity_name)]
c
daily_summary
c
daily_summary
activity_summary(daily_summary)
exit
c
c'c'c'c'c
c
activity_summary(daily_summary).each do |acitvity|
activity_summary(daily_summary)
c
activity_summary
monthly_summary(Date.today)
c
activity.fetch('summary')
activity
c
client.profile
c
expect
c
@client = Moves::Client.new(access_token)
c
client
c
Moves::Client
Moves::Client.called?
hello
c
hello
c
Moves::Client.new(access_token)
@hello
c
expect(Moves::Client).to receive(:new)
c
Moves::Client.new(access_token).errors
Moves::Client.new(access_token)
c
 Moves::Client.new(access_token)
Moves::Client
c
Moves::Client.methods
Moves::Client.new
Moves::Client
c
Moves::Client.methods
Moves::Client.new
Moves::Client
exit
c
daily_activity.fetch('summary')
daily_activity
exit
c
daily_activity
c
daily_activity
exit
c
daily_activity
daily_activity.first.fetch('distance')
c
moves_client.daily_summary((Date.today - 30)..Date.today)
moves_client.daily_summary((Date.today - 31)..Date.today)
moves.daily_summary(:pastDays => 31)
moves_client.daily_summary(Datemoves.daily_summary(:pastDays => 31
(Date.today - time)..Date.today
Date.today - time)..Date.today
(Date.today - time)
moves_client.daily_summary((Date.today - time)..Date.today)
c
moves_client.daily_summary(firstc
moves_client.daily_summary(first_date..(first_date + 30))
moves_client.daily_summary(first_date..(first_date + 10))
moves_client.daily_summary(first_date..(first_date + 1))
moves_client.daily_summary(first_date..(Date.today - 1))
first_date.class
Date.today.class
Date.today
moves_client.daily_summary(first_date..(first_date + 1))
moves_client.daily_summary(first_date..Date.today)
moves_client.daily_summary
moves_client
first_date
c
@moves_client.daily_summary((Date.today - 3)..Date.today)
pp @moves_client.daily_summary((Date.today - 3)..Date.today)
@moves_client.daily_summary((Date.today - 3)..Date.today).count
@moves_client.daily_summary((Date.today - 3)..Date.today)
@moves_client.daily_summary((Date.today - 1)..Date.today)
@moves_client.daily_summary((Date.today - a)..Date.today).length
@moves_client.daily_summary(Date.today - @moves_client.daily_summary(:from => "2013-06-20", :to => "2013-06-23").length
@moves_client.daily_summary(updatedSince: a.days.ago).length
@moves_client.daily_summary(updatedSince: a.days.ago)
a = (Date.today - @moves_client.profile.fetch('profile').fetch('firstDate').to_date).to_i
(Date.today - @moves_client.profile.fetch('profile').fetch('firstDate').to_date).to_i
(Date.today - @moves_client.profile.fetch('profile').fetch('firstDate').to_date)
Date.today - @moves_client.profile.fetch('profile').fetch('firstDate').to_date.to_i
Date.today - @moves_client.profile.fetch('profile').fetch('firstDate').to_date
Date.today -@moves_client.profile.fetch('profile').fetch('firstDate').to_date
@moves_client.profile.fetch('profile').fetch('firstDate').to_date
@moves_client.daily_summary(from: d, to: d1)
d1 = '2015-12-15'
d1
d
@moves_client.daily_summary(from: d, to: d1)
@moves_client.daily_summary(d)
d = '2015-09-15'
@moves_client.daily_summary(d1)
@moves_client.daily_summary(d)
@moves_client.daily_summary(past_days: 31)
@moves_client.daily_summary
@moves_client.daily_summary(from: d, to: d1)
d1 = '2015-12-16'
Date.today
d = '2015-09-02'
@moves_client.profile.fetch('profile').fetch('firstDate')
@moves_client.daily_summary(from: d, to: Date.today)
d = @moves_client.profile.fetch('profile').fetch('firstDate').to_date
@moves_client.profile.fetch('profile').fetch('firstDate').to_date
@moves_client.profile.fetch('profile').fetch('firstDate')
@moves_client.profile.fetch('profile').fetch('first_date')
@moves_client.profile.fetch('profile').methods
@moves_client.profile.fetch('profile').fetch('first_date')
@moves_client.profile.fetch('profile')
@moves_client.profile
@moves_client
moves
move
c
walking_data
c
@moves_client.profile
@moves_client
c
rails c
c
@moves_client.daily_activities
@moves_client.daily_activites
@moves_client.profile
@moves_client.methods
c
require 'moves'
Moves::Client.new
Moves::Client
Moves
c
require 'shoulda/matchers'.errors
require 'shoulda/matchers'
require 'shoulda/matchers'.errors
require 'shoulda/matchers'
